/*
 * Modular Imputation Reference Panel Pipeline Configuration
 */

// Default process configuration
process {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
    
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'
    
    // Process-specific resources
    withName: 'convertMultiallelicToBiallelic' {
        cpus = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    
    withName: 'extractSiteInfo' {
        cpus = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    
    withName: 'createChunks' {
        cpus = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    
    withName: 'splitReferenceIntoChunks' {
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
    
    withName: 'summarizeResults' {
        cpus = 1
        memory = '2 GB'
    }
}

// Execution profiles
profiles {
    standard {
        process.container = 'pjgreer/glimpse2plus:v0.1'
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
    }
    
    test {
        params {
            // Minimal test dataset
            input_pattern = "$projectDir/test_data/test_chr*.bcf"
            chromosomes = "21,22"  // Only process smaller chromosomes for testing
            max_cpus = 2
            max_memory = '4 GB'
        }
    }
    
    dnanexus {
        process {
            executor = 'dx'
            container = params.docker_image
        }
        
        dx {
            // Default instance type
            instanceType = 'mem2_ssd1_v2_x4'
            
            // Instance type overrides for specific processes
            instanceType {
                'splitReferenceIntoChunks' = 'mem3_ssd1_v2_x8'
            }
        }
        
        params {
            // Override with your project ID
            project = "project-xxxx"  // Replace with your DNAnexus project ID
        }
    }
    
    slurm {
        process {
            executor = 'slurm'
            clusterOptions = '--account=myaccount'
        }
        executor {
            queueSize = 50
            submitRateLimit = '10 sec'
        }
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        docker.enabled = false
    }
}

// Report and trace options
timeline {
    enabled = true
    file = "${params.output_dir}/pipeline_info/timeline.html"
}

report {
    enabled = true
    file = "${params.output_dir}/pipeline_info/report.html"
}

trace {
    enabled = true
    file = "${params.output_dir}/pipeline_info/trace.txt"
}

dag {
    enabled = true
    file = "${params.output_dir}/pipeline_info/dag.svg"
}

// Function to check max resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "WARNING: Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Capturing Nextflow parameters to use in manifest
manifest {
    name = 'BGE Imputation Reference Panel'
    homePage = 'https://github.com/your-repo/bge-imputation-pipeline'
    description = 'Nextflow pipeline for BGE imputation reference panel creation'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.10.0'
    version = '1.0.0'
}